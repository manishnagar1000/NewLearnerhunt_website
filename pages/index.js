import CollegeRanking from '@/components/CollegeRanking'
import HomepageHeroSection from '@/components/HomepageHeroSection'
import StudyAbroad from '@/components/StudyAbroad'
import TopColleges from '@/components/TopColleges'
import TopCourses from '@/components/TopCourses'
import TopExams from '@/components/TopExams'

import Head from 'next/head'

export default function Home({colleges,courses,exams,testeligibility}) {
  return (
    <>
      <Head>
        <title>LearnerHunt</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <HomepageHeroSection data={testeligibility}/>
      <TopColleges colleges={colleges}/>
      <TopCourses  courses ={courses}/>
      <CollegeRanking zones={testeligibility.zones} departments={testeligibility.departments} rankingtypes={testeligibility.rankingtypes} />
      <TopExams exams={exams}/>
      <StudyAbroad/>
    </>
  )
}


export async function getServerSideProps() {
  try {
    // Fetch data from external API
    const colleges_res = await fetch(process.env.NEXT_PUBLIC_API_ENDPOINT + "/colleges?limit=4&page=0");
    const colleges = await colleges_res.json();

    const courses_res = await fetch(process.env.NEXT_PUBLIC_API_ENDPOINT + `/courses?limit=-1&page=0&type=ug`);
    const courses = await courses_res.json();

    const exams_res = await fetch(process.env.NEXT_PUBLIC_API_ENDPOINT + "/exams?limit=4&page=0");
    const exams = await exams_res.json();

    const testeligibility_res = await fetch(process.env.NEXT_PUBLIC_API_ENDPOINT + "/miscellaneous/testeligibility");
    const testeligibility = await testeligibility_res.json();

    return {
      props: {
        colleges: colleges.data,
        courses: courses.data,
        exams: exams.data,
        testeligibility,
      },
    };
  } catch (error) {
    console.error("Error fetching data:", error);
    return {
      props: {
        colleges: [],
        courses: [],
        exams: [],
        testeligibility: {},
      },
    };
  }
}